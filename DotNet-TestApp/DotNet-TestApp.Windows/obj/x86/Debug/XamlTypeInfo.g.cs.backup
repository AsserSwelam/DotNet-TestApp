//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace DotNet_TestApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[44];
            _typeNameTable[0] = "Esri.ArcGISRuntime.Controls.MapView";
            _typeNameTable[1] = "Esri.ArcGISRuntime.Controls.ViewBase";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[3] = "Esri.ArcGISRuntime.Controls.Map";
            _typeNameTable[4] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[5] = "Esri.ArcGISRuntime.Layers.LayerCollection";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "Esri.ArcGISRuntime.Layers.Layer";
            _typeNameTable[10] = "Esri.ArcGISRuntime.Geometry.Envelope";
            _typeNameTable[11] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[12] = "Esri.ArcGISRuntime.Layers.LayerStatus";
            _typeNameTable[13] = "System.Enum";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "System.Exception";
            _typeNameTable[16] = "Esri.ArcGISRuntime.Geometry.SpatialReference";
            _typeNameTable[17] = "Double";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "String";
            _typeNameTable[20] = "Esri.ArcGISRuntime.Location.LocationDisplay";
            _typeNameTable[21] = "Esri.ArcGISRuntime.Controls.MapGrid";
            _typeNameTable[22] = "Esri.ArcGISRuntime.Controls.MapGridLevelCollection";
            _typeNameTable[23] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>";
            _typeNameTable[24] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>";
            _typeNameTable[25] = "Esri.ArcGISRuntime.Controls.MapGridLevel";
            _typeNameTable[26] = "Windows.UI.Color";
            _typeNameTable[27] = "Int32";
            _typeNameTable[28] = "Esri.ArcGISRuntime.Data.TimeExtent";
            _typeNameTable[29] = "Esri.ArcGISRuntime.Controls.Editor";
            _typeNameTable[30] = "Windows.UI.Xaml.Controls.UIElementCollection";
            _typeNameTable[31] = "Esri.ArcGISRuntime.Geometry.MapPoint";
            _typeNameTable[32] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[33] = "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer";
            _typeNameTable[34] = "Esri.ArcGISRuntime.Layers.TiledLayer";
            _typeNameTable[35] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo";
            _typeNameTable[36] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase";
            _typeNameTable[37] = "Esri.ArcGISRuntime.ArcGISServices.ServiceInfo";
            _typeNameTable[38] = "System.Net.Http.HttpMessageHandler";
            _typeNameTable[39] = "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo";
            _typeNameTable[40] = "Esri.ArcGISRuntime.Layers.LayerInitializationInfo";
            _typeNameTable[41] = "DotNet_TestApp.MainPage";
            _typeNameTable[42] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[43] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[44];
            _typeTable[0] = typeof(global::Esri.ArcGISRuntime.Controls.MapView);
            _typeTable[1] = typeof(global::Esri.ArcGISRuntime.Controls.ViewBase);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[3] = typeof(global::Esri.ArcGISRuntime.Controls.Map);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[5] = typeof(global::Esri.ArcGISRuntime.Layers.LayerCollection);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::Esri.ArcGISRuntime.Layers.Layer);
            _typeTable[10] = typeof(global::Esri.ArcGISRuntime.Geometry.Envelope);
            _typeTable[11] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[12] = typeof(global::Esri.ArcGISRuntime.Layers.LayerStatus);
            _typeTable[13] = typeof(global::System.Enum);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::System.Exception);
            _typeTable[16] = typeof(global::Esri.ArcGISRuntime.Geometry.SpatialReference);
            _typeTable[17] = typeof(global::System.Double);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::System.String);
            _typeTable[20] = typeof(global::Esri.ArcGISRuntime.Location.LocationDisplay);
            _typeTable[21] = typeof(global::Esri.ArcGISRuntime.Controls.MapGrid);
            _typeTable[22] = typeof(global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>);
            _typeTable[25] = typeof(global::Esri.ArcGISRuntime.Controls.MapGridLevel);
            _typeTable[26] = typeof(global::Windows.UI.Color);
            _typeTable[27] = typeof(global::System.Int32);
            _typeTable[28] = typeof(global::Esri.ArcGISRuntime.Data.TimeExtent);
            _typeTable[29] = typeof(global::Esri.ArcGISRuntime.Controls.Editor);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Controls.UIElementCollection);
            _typeTable[31] = typeof(global::Esri.ArcGISRuntime.Geometry.MapPoint);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[33] = typeof(global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer);
            _typeTable[34] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayer);
            _typeTable[35] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo);
            _typeTable[36] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase);
            _typeTable[37] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.ServiceInfo);
            _typeTable[38] = typeof(global::System.Net.Http.HttpMessageHandler);
            _typeTable[39] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo);
            _typeTable[40] = typeof(global::Esri.ArcGISRuntime.Layers.LayerInitializationInfo);
            _typeTable[41] = typeof(global::DotNet_TestApp.MainPage);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MapView() { return new global::Esri.ArcGISRuntime.Controls.MapView(); }
        private object Activate_3_Map() { return new global::Esri.ArcGISRuntime.Controls.Map(); }
        private object Activate_5_LayerCollection() { return new global::Esri.ArcGISRuntime.Layers.LayerCollection(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_10_Envelope() { return new global::Esri.ArcGISRuntime.Geometry.Envelope(); }
        private object Activate_15_Exception() { return new global::System.Exception(); }
        private object Activate_16_SpatialReference() { return new global::Esri.ArcGISRuntime.Geometry.SpatialReference(); }
        private object Activate_20_LocationDisplay() { return new global::Esri.ArcGISRuntime.Location.LocationDisplay(); }
        private object Activate_22_MapGridLevelCollection() { return new global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection(); }
        private object Activate_23_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>(); }
        private object Activate_24_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>(); }
        private object Activate_25_MapGridLevel() { return new global::Esri.ArcGISRuntime.Controls.MapGridLevel(); }
        private object Activate_28_TimeExtent() { return new global::Esri.ArcGISRuntime.Data.TimeExtent(); }
        private object Activate_29_Editor() { return new global::Esri.ArcGISRuntime.Controls.Editor(); }
        private object Activate_31_MapPoint() { return new global::Esri.ArcGISRuntime.Geometry.MapPoint(); }
        private object Activate_33_ArcGISTiledMapServiceLayer() { return new global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer(); }
        private object Activate_41_MainPage() { return new global::DotNet_TestApp.MainPage(); }
        private void VectorAdd_5_LayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_MapGridLevelCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Esri.ArcGISRuntime.Controls.MapView
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase"));
                userType.Activator = Activate_0_MapView;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.MapView.Map");
                userType.AddMemberName("Map");
                userType.AddMemberName("LocationDisplay");
                userType.AddMemberName("IsNavigating");
                userType.AddMemberName("MapGrid");
                userType.AddMemberName("Extent");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("Scale");
                userType.AddMemberName("UnitsPerPixel");
                userType.AddMemberName("MaximumExtent");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("WrapAround");
                userType.AddMemberName("TimeExtent");
                userType.AddMemberName("Rotation");
                userType.AddMemberName("Editor");
                userType.AddMemberName("ShowMagnifierOnTapAndHold");
                userType.AddMemberName("Overlays");
                userType.AddMemberName("MapOverlayAnchor");
                xamlType = userType;
                break;

            case 1:   //  Esri.ArcGISRuntime.Controls.ViewBase
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                xamlType = userType;
                break;

            case 2:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Esri.ArcGISRuntime.Controls.Map
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_3_Map;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.Map.Layers");
                userType.AddMemberName("Layers");
                userType.AddMemberName("InitialExtent");
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Esri.ArcGISRuntime.Layers.LayerCollection
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.CollectionAdd = VectorAdd_5_LayerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.Activator = Activate_6_ObservableCollection;
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Esri.ArcGISRuntime.Layers.Layer
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("FullExtent");
                userType.AddMemberName("Status");
                userType.AddMemberName("InitializationException");
                userType.AddMemberName("DefaultSpatialReference");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ShowLegend");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("ID");
                xamlType = userType;
                break;

            case 10:   //  Esri.ArcGISRuntime.Geometry.Envelope
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Esri.ArcGISRuntime.Layers.LayerStatus
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NotInitialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.NotInitialized);
                userType.AddEnumValue("Initializing", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initializing);
                userType.AddEnumValue("Initialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initialized);
                userType.AddEnumValue("Failed", global::Esri.ArcGISRuntime.Layers.LayerStatus.Failed);
                xamlType = userType;
                break;

            case 13:   //  System.Enum
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  System.Exception
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Esri.ArcGISRuntime.Geometry.SpatialReference
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Double
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Boolean
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  String
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Esri.ArcGISRuntime.Location.LocationDisplay
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  Esri.ArcGISRuntime.Controls.MapGrid
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.MapGrid.Levels");
                userType.AddMemberName("Levels");
                xamlType = userType;
                break;

            case 22:   //  Esri.ArcGISRuntime.Controls.MapGridLevelCollection
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>"));
                userType.CollectionAdd = VectorAdd_22_MapGridLevelCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>"));
                userType.Activator = Activate_23_ObservableCollection;
                userType.CollectionAdd = VectorAdd_23_ObservableCollection;
                xamlType = userType;
                break;

            case 24:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_Collection;
                userType.CollectionAdd = VectorAdd_24_Collection;
                xamlType = userType;
                break;

            case 25:   //  Esri.ArcGISRuntime.Controls.MapGridLevel
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_MapGridLevel;
                userType.AddMemberName("LineColor");
                userType.AddMemberName("LineWidth");
                userType.AddMemberName("LabelColor");
                userType.AddMemberName("AreLabelsVisible");
                userType.AddMemberName("AreLinesVisible");
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Color
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Int32
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Esri.ArcGISRuntime.Data.TimeExtent
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Esri.ArcGISRuntime.Controls.Editor
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.Controls.UIElementCollection
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Esri.ArcGISRuntime.Geometry.MapPoint
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer"));
                userType.Activator = Activate_33_ArcGISTiledMapServiceLayer;
                userType.AddMemberName("ServiceUri");
                userType.AddMemberName("Token");
                userType.AddMemberName("ServiceInfo");
                userType.AddMemberName("HttpMessageHandler");
                xamlType = userType;
                break;

            case 34:   //  Esri.ArcGISRuntime.Layers.TiledLayer
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer"));
                userType.AddMemberName("TileInfo");
                userType.AddMemberName("Brightness");
                userType.AddMemberName("Contrast");
                userType.AddMemberName("Gamma");
                xamlType = userType;
                break;

            case 35:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.ServiceInfo"));
                xamlType = userType;
                break;

            case 37:   //  Esri.ArcGISRuntime.ArcGISServices.ServiceInfo
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 38:   //  System.Net.Http.HttpMessageHandler
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerInitializationInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Esri.ArcGISRuntime.Layers.LayerInitializationInfo
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 41:   //  DotNet_TestApp.MainPage
                userType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Metadata.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_MapView_Map(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Map;
        }
        private void set_0_MapView_Map(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Map = (global::Esri.ArcGISRuntime.Controls.Map)Value;
        }
        private object get_1_Map_Layers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.Layers;
        }
        private void set_1_Map_Layers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.Layers = (global::Esri.ArcGISRuntime.Layers.LayerCollection)Value;
        }
        private object get_2_Layer_FullExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.FullExtent;
        }
        private object get_3_Layer_Status(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Status;
        }
        private object get_4_Layer_InitializationException(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.InitializationException;
        }
        private object get_5_Layer_DefaultSpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DefaultSpatialReference;
        }
        private object get_6_Layer_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Opacity;
        }
        private void set_6_Layer_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_7_Layer_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.IsVisible;
        }
        private void set_7_Layer_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_8_Layer_DisplayName(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DisplayName;
        }
        private void set_8_Layer_DisplayName(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_9_Layer_ShowLegend(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ShowLegend;
        }
        private void set_9_Layer_ShowLegend(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ShowLegend = (global::System.Boolean)Value;
        }
        private object get_10_Layer_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MinScale;
        }
        private void set_10_Layer_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_11_Layer_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MaxScale;
        }
        private void set_11_Layer_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_12_Layer_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ID;
        }
        private void set_12_Layer_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ID = (global::System.String)Value;
        }
        private object get_13_MapView_LocationDisplay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.LocationDisplay;
        }
        private void set_13_MapView_LocationDisplay(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.LocationDisplay = (global::Esri.ArcGISRuntime.Location.LocationDisplay)Value;
        }
        private object get_14_MapView_IsNavigating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.IsNavigating;
        }
        private object get_15_MapView_MapGrid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MapGrid;
        }
        private void set_15_MapView_MapGrid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MapGrid = (global::Esri.ArcGISRuntime.Controls.MapGrid)Value;
        }
        private object get_16_MapGrid_Levels(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGrid)instance;
            return that.Levels;
        }
        private void set_16_MapGrid_Levels(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGrid)instance;
            that.Levels = (global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection)Value;
        }
        private object get_17_MapGridLevel_LineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LineColor;
        }
        private void set_17_MapGridLevel_LineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LineColor = (global::Windows.UI.Color)Value;
        }
        private object get_18_MapGridLevel_LineWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LineWidth;
        }
        private void set_18_MapGridLevel_LineWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LineWidth = (global::System.Int32)Value;
        }
        private object get_19_MapGridLevel_LabelColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LabelColor;
        }
        private void set_19_MapGridLevel_LabelColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LabelColor = (global::Windows.UI.Color)Value;
        }
        private object get_20_MapGridLevel_AreLabelsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.AreLabelsVisible;
        }
        private void set_20_MapGridLevel_AreLabelsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.AreLabelsVisible = (global::System.Boolean)Value;
        }
        private object get_21_MapGridLevel_AreLinesVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.AreLinesVisible;
        }
        private void set_21_MapGridLevel_AreLinesVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.AreLinesVisible = (global::System.Boolean)Value;
        }
        private object get_22_MapView_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Extent;
        }
        private object get_23_MapView_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.SpatialReference;
        }
        private object get_24_MapView_Scale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Scale;
        }
        private object get_25_MapView_UnitsPerPixel(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.UnitsPerPixel;
        }
        private object get_26_MapView_MaximumExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MaximumExtent;
        }
        private void set_26_MapView_MaximumExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MaximumExtent = (global::Esri.ArcGISRuntime.Geometry.Envelope)Value;
        }
        private object get_27_MapView_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MaxScale;
        }
        private void set_27_MapView_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_28_MapView_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MinScale;
        }
        private void set_28_MapView_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_29_MapView_WrapAround(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.WrapAround;
        }
        private void set_29_MapView_WrapAround(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.WrapAround = (global::System.Boolean)Value;
        }
        private object get_30_MapView_TimeExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.TimeExtent;
        }
        private void set_30_MapView_TimeExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.TimeExtent = (global::Esri.ArcGISRuntime.Data.TimeExtent)Value;
        }
        private object get_31_MapView_Rotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Rotation;
        }
        private void set_31_MapView_Rotation(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_32_MapView_Editor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Editor;
        }
        private void set_32_MapView_Editor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Editor = (global::Esri.ArcGISRuntime.Controls.Editor)Value;
        }
        private object get_33_MapView_ShowMagnifierOnTapAndHold(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.ShowMagnifierOnTapAndHold;
        }
        private void set_33_MapView_ShowMagnifierOnTapAndHold(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.ShowMagnifierOnTapAndHold = (global::System.Boolean)Value;
        }
        private object get_34_MapView_Overlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Overlays;
        }
        private object get_35_MapView_MapOverlayAnchor(object instance)
        {
            return global::Esri.ArcGISRuntime.Controls.MapView.GetMapOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_35_MapView_MapOverlayAnchor(object instance, object Value)
        {
            global::Esri.ArcGISRuntime.Controls.MapView.SetMapOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value);
        }
        private object get_36_Map_InitialExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.InitialExtent;
        }
        private void set_36_Map_InitialExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.InitialExtent = (global::Esri.ArcGISRuntime.Geometry.Envelope)Value;
        }
        private object get_37_ArcGISTiledMapServiceLayer_ServiceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceUri;
        }
        private void set_37_ArcGISTiledMapServiceLayer_ServiceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.ServiceUri = (global::System.String)Value;
        }
        private object get_38_ArcGISTiledMapServiceLayer_Token(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.Token;
        }
        private void set_38_ArcGISTiledMapServiceLayer_Token(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.Token = (global::System.String)Value;
        }
        private object get_39_ArcGISTiledMapServiceLayer_ServiceInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceInfo;
        }
        private object get_40_ArcGISTiledMapServiceLayer_HttpMessageHandler(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.HttpMessageHandler;
        }
        private void set_40_ArcGISTiledMapServiceLayer_HttpMessageHandler(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.HttpMessageHandler = (global::System.Net.Http.HttpMessageHandler)Value;
        }
        private object get_41_TiledLayer_TileInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.TileInfo;
        }
        private object get_42_TiledLayer_Brightness(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Brightness;
        }
        private void set_42_TiledLayer_Brightness(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Brightness = (global::System.Double)Value;
        }
        private object get_43_TiledLayer_Contrast(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Contrast;
        }
        private void set_43_TiledLayer_Contrast(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Contrast = (global::System.Double)Value;
        }
        private object get_44_TiledLayer_Gamma(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Gamma;
        }
        private void set_44_TiledLayer_Gamma(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Gamma = (global::System.Double)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Esri.ArcGISRuntime.Controls.MapView.Map":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Map", "Esri.ArcGISRuntime.Controls.Map");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MapView_Map;
                xamlMember.Setter = set_0_MapView_Map;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.Layers":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Layers", "Esri.ArcGISRuntime.Layers.LayerCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Map_Layers;
                xamlMember.Setter = set_1_Map_Layers;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.FullExtent":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "FullExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_2_Layer_FullExtent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Status":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Status", "Esri.ArcGISRuntime.Layers.LayerStatus");
                xamlMember.Getter = get_3_Layer_Status;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.InitializationException":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "InitializationException", "System.Exception");
                xamlMember.Getter = get_4_Layer_InitializationException;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DefaultSpatialReference":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "DefaultSpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_5_Layer_DefaultSpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Opacity":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_Layer_Opacity;
                xamlMember.Setter = set_6_Layer_Opacity;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.IsVisible":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_Layer_IsVisible;
                xamlMember.Setter = set_7_Layer_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DisplayName":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_Layer_DisplayName;
                xamlMember.Setter = set_8_Layer_DisplayName;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ShowLegend":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "ShowLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_Layer_ShowLegend;
                xamlMember.Setter = set_9_Layer_ShowLegend;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MinScale":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_Layer_MinScale;
                xamlMember.Setter = set_10_Layer_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MaxScale":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_Layer_MaxScale;
                xamlMember.Setter = set_11_Layer_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ID":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "ID", "String");
                xamlMember.Getter = get_12_Layer_ID;
                xamlMember.Setter = set_12_Layer_ID;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.LocationDisplay":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "LocationDisplay", "Esri.ArcGISRuntime.Location.LocationDisplay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MapView_LocationDisplay;
                xamlMember.Setter = set_13_MapView_LocationDisplay;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.IsNavigating":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_14_MapView_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MapGrid":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MapGrid", "Esri.ArcGISRuntime.Controls.MapGrid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MapView_MapGrid;
                xamlMember.Setter = set_15_MapView_MapGrid;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGrid.Levels":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGrid");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Levels", "Esri.ArcGISRuntime.Controls.MapGridLevelCollection");
                xamlMember.Getter = get_16_MapGrid_Levels;
                xamlMember.Setter = set_16_MapGrid_Levels;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LineColor":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "LineColor", "Windows.UI.Color");
                xamlMember.Getter = get_17_MapGridLevel_LineColor;
                xamlMember.Setter = set_17_MapGridLevel_LineColor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LineWidth":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "LineWidth", "Int32");
                xamlMember.Getter = get_18_MapGridLevel_LineWidth;
                xamlMember.Setter = set_18_MapGridLevel_LineWidth;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LabelColor":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "LabelColor", "Windows.UI.Color");
                xamlMember.Getter = get_19_MapGridLevel_LabelColor;
                xamlMember.Setter = set_19_MapGridLevel_LabelColor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.AreLabelsVisible":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "AreLabelsVisible", "Boolean");
                xamlMember.Getter = get_20_MapGridLevel_AreLabelsVisible;
                xamlMember.Setter = set_20_MapGridLevel_AreLabelsVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.AreLinesVisible":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "AreLinesVisible", "Boolean");
                xamlMember.Getter = get_21_MapGridLevel_AreLinesVisible;
                xamlMember.Setter = set_21_MapGridLevel_AreLinesVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Extent":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_22_MapView_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.SpatialReference":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_23_MapView_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Scale":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.Getter = get_24_MapView_Scale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.UnitsPerPixel":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "UnitsPerPixel", "Double");
                xamlMember.Getter = get_25_MapView_UnitsPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MaximumExtent":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MaximumExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_MapView_MaximumExtent;
                xamlMember.Setter = set_26_MapView_MaximumExtent;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MaxScale":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MapView_MaxScale;
                xamlMember.Setter = set_27_MapView_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MinScale":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_MapView_MinScale;
                xamlMember.Setter = set_28_MapView_MinScale;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.WrapAround":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "WrapAround", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MapView_WrapAround;
                xamlMember.Setter = set_29_MapView_WrapAround;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.TimeExtent":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "TimeExtent", "Esri.ArcGISRuntime.Data.TimeExtent");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_MapView_TimeExtent;
                xamlMember.Setter = set_30_MapView_TimeExtent;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Rotation":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_MapView_Rotation;
                xamlMember.Setter = set_31_MapView_Rotation;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Editor":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Editor", "Esri.ArcGISRuntime.Controls.Editor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_MapView_Editor;
                xamlMember.Setter = set_32_MapView_Editor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.ShowMagnifierOnTapAndHold":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "ShowMagnifierOnTapAndHold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_MapView_ShowMagnifierOnTapAndHold;
                xamlMember.Setter = set_33_MapView_ShowMagnifierOnTapAndHold;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Overlays":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Overlays", "Windows.UI.Xaml.Controls.UIElementCollection");
                xamlMember.Getter = get_34_MapView_Overlays;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MapOverlayAnchor":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "MapOverlayAnchor", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_35_MapView_MapOverlayAnchor;
                xamlMember.Setter = set_35_MapView_MapOverlayAnchor;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.InitialExtent":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "InitialExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_Map_InitialExtent;
                xamlMember.Setter = set_36_Map_InitialExtent;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceUri":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "ServiceUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ArcGISTiledMapServiceLayer_ServiceUri;
                xamlMember.Setter = set_37_ArcGISTiledMapServiceLayer_ServiceUri;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.Token":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Token", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ArcGISTiledMapServiceLayer_Token;
                xamlMember.Setter = set_38_ArcGISTiledMapServiceLayer_Token;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceInfo":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "ServiceInfo", "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo");
                xamlMember.Getter = get_39_ArcGISTiledMapServiceLayer_ServiceInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.HttpMessageHandler":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "HttpMessageHandler", "System.Net.Http.HttpMessageHandler");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ArcGISTiledMapServiceLayer_HttpMessageHandler;
                xamlMember.Setter = set_40_ArcGISTiledMapServiceLayer_HttpMessageHandler;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.TileInfo":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "TileInfo", "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo");
                xamlMember.Getter = get_41_TiledLayer_TileInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Brightness":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Brightness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_TiledLayer_Brightness;
                xamlMember.Setter = set_42_TiledLayer_Brightness;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Contrast":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Contrast", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_TiledLayer_Contrast;
                xamlMember.Setter = set_43_TiledLayer_Contrast;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Gamma":
                userType = (global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlMember(this, "Gamma", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_TiledLayer_Gamma;
                xamlMember.Setter = set_44_TiledLayer_Gamma;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::DotNet_TestApp.DotNet_TestApp_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



